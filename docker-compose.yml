name: waltzes_dev

networks:
  waltzes_network:
    driver: bridge

services:
  localstack:
    container_name: '${COMPOSE_PROJECT_NAME}_localstack'
    networks:
      - waltzes_network
    image: localstack/localstack
    ports:
      - '127.0.0.1:4566:4566'
      - '127.0.0.1:4510-4559:4510-4559'
    environment:
      - SERVICES=sqs,s3,ses
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - PORT_WEB_UI=8080
      - USE_SSL=0
      - DISABLE_CUSTOM_CORS_S3=1 # Optional: Prevents some S3 CORS issues

  mongo:
    container_name: '${COMPOSE_PROJECT_NAME}_mongodb'
    networks:
      - waltzes_network
    image: mongo:4.4
    ports:
      - '27017:27017'
    volumes:
      - ./docker-volume/mongodb:/data/db

  web-server:
    container_name: '${COMPOSE_PROJECT_NAME}_web-server'
    networks:
      - waltzes_network
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    build:
      context: ./waltzes-web-server
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
    env_file:
      - ./waltzes-web-server/.env
    depends_on:
      localstack:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "sh", "./localstack-health-check.sh" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./waltzes-web-server/logs:/usr/src/app/logs # Mount the logs directory

  web:
    container_name: '${COMPOSE_PROJECT_NAME}_web'
    networks:
      - waltzes_network
    build:
      context: ./web
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - web-server
    ports:
      - '3001:3000'

  python-linkedin:
    container_name: '${COMPOSE_PROJECT_NAME}_python_linkedin'
    networks:
      - waltzes_network
    build:
      context: ./waltzes-python
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - localstack
      - web-server
    env_file:
      - ./waltzes-python/.env
    command: src/poll_linkedin_scraper_queue.py

  python-cover-letter:
    container_name: '${COMPOSE_PROJECT_NAME}_python_cover_letter'
    networks:
      - waltzes_network
    build:
      context: ./waltzes-python
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - localstack
      - web-server
    env_file:
      - ./waltzes-python/.env
    command: src/poll_cover_letter_creator.py
  python-resume:
    container_name: '${COMPOSE_PROJECT_NAME}_python_resume'
    networks:
      - waltzes_network
    build:
      context: ./waltzes-python
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - localstack
      - web-server
    env_file:
      - ./waltzes-python/.env
    command: src/poll_resume_creator.py
  python-job-scrapper:
    container_name: '${COMPOSE_PROJECT_NAME}_python_job_scrapper'
    networks:
      - waltzes_network
    build:
      context: ./waltzes-python
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - localstack
      - web-server
    env_file:
      - ./waltzes-python/.env
    command: src/poll_job_scraper_queue.py
  python-job-structuror:
    container_name: '${COMPOSE_PROJECT_NAME}_python_job_structuror'
    networks:
      - waltzes_network
    build:
      context: ./waltzes-python
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - localstack
      - web-server
    env_file:
      - ./waltzes-python/.env
    command: src/poll_job_structuror_queue.py
  python-pdf-creator:
    container_name: '${COMPOSE_PROJECT_NAME}_python_pdf_creator'
    networks:
      - waltzes_network
    restart: unless-stopped
    build:
      context: ./waltzes-python
      dockerfile: Dockerfile
    depends_on:
      - localstack
      - web-server
    env_file:
      - ./waltzes-python/.env
    command: src/poll_pdf_creator.py

  dozzle:
    container_name: '${COMPOSE_PROJECT_NAME}_dozzle_log'
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:8080
    networks:
      - waltzes_network
    deploy:
      mode: global
